# core/anything-server/nixpacks.toml

# This section defines system packages to be installed using Nix.
[phases.setup]
# By providing an explicit list of Nix packages, we guide Nixpacks.
# The hope is that it will source these from a single, consistent nixpkgs revision,
# thus avoiding conflicts with core utilities like binutils (which provides addr2line).
nixPkgs = [
  "rustup",       # Standard way to manage Rust toolchains
  "gcc",          # A C compiler (binutils is typically a dependency of gcc or stdenv)
  "openssl",      # A very common dependency for Rust crates (for crypto, HTTPS)
  "pkg-config",   # Helps Rust's build scripts find C libraries
  "glibcLocales"  # Often needed for proper locale support, can prevent subtle runtime issues
]

# If Nixpacks isn't picking up your Rust version correctly, you might need to specify a provider.
# Often, a rust-toolchain.toml file in your project is enough.
# [providers]
# rust = "1.78" # Example: specify a Rust version if needed

# If your application has a specific binary to run and Nixpacks doesn't find it,
# you can specify a start command.
# [start]
# cmd = "target/release/anything-server" # Adjust to your binary path 